<?xml version="1.0" ?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 * Version: Open Software License v. 2.1
 *
 * The contents of this file are subject to the Open Software License Version
 * 2.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.opensource.org/licenses/osl-2.1.php
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the 'Rooster Teeth Site Extender'.
 *
 * The Initial Developer of the Original Code is
 * Shawn Wilsher
 *
 * Portions created by the Initial Developer are Copyright (C) 2005-2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *     Brandon Jernigan
 *
 * ***** END LICENSE BLOCK ***** */
-->
<bindings id="xulBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<binding id="editor">
		<resources>
			<stylesheet src="chrome://rtse/skin/editor.css"/>
		</resources>
		<content>
			<!-- Start of the Content -->
			<xul:deck id="deck" selectedIndex="0">
					<xul:vbox flex="1" pack="end"><!-- Index 0 - Editor -->
					<html:input id="title" type="hidden" maxlength="40" tabindex="1" xbl:inherits="value=title"/>
					<xul:toolbox pack="center">
						<xul:toolbar id="topToolbar">
							<xul:toolbarbutton id="b" image="chrome://rtse/skin/images/editor/bold.png" oncommand="insertTag('b');" tooltipText="Bold"/>
							<xul:toolbarbutton id="i" image="chrome://rtse/skin/images/editor/italic.png" oncommand="insertTag('i');" tooltipText="Italic"/>
							<xul:toolbarbutton id="u" image="chrome://rtse/skin/images/editor/underline.png" oncommand="insertTag('u');" tooltipText="Underline"/>
							<xul:toolbarbutton id="s" image="chrome://rtse/skin/images/editor/strike.png" oncommand="insertTag('s');" tooltipText="Strike"/>
							<xul:toolbarbutton id="img" image="chrome://rtse/skin/images/editor/image.png" oncommand="insertTag('img');" tooltipText="Image"/>
							<xul:toolbarbutton id="quote" image="chrome://rtse/skin/images/editor/quote.png" oncommand="insertTag('quote');" tooltipText="Quote"/>
							<xul:toolbarbutton id="link" image="chrome://rtse/skin/images/editor/link.png" oncommand="link();" tooltipText="Link"/>
							<xul:toolbarbutton id="color" image="chrome://rtse/skin/images/editor/color.png" type="menu" autoCheck="false" tooltipText="Color" hidden="true">
								<xul:menupopup>
									<xul:menuitem label="Red" value="FF0000" oncommand="addColor(this.value);"/>
									<xul:menuitem label="Orange" value="FFAA00" oncommand="addColor(this.value);"/>
									<xul:menuitem label="Yellow" value="DDFF00" oncommand="addColor(this.value);"/>
									<xul:menuitem label="Green" value="00FF00" oncommand="addColor(this.value);"/>
									<xul:menuitem label="Blue" value="0000FF" oncommand="addColor(this.value);"/>
									<xul:menuitem label="Violet" value="AA00FF" oncommand="addColor(this.value);"/>
									<xul:menuitem label="Brown" value="AA8800" oncommand="addColor(this.value);"/>
									<xul:menuitem label="White" value="FFFFFF" oncommand="addColor(this.value);"/>
									<xul:menuseparator/>
									<xul:menuitem label="Custom Color" oncommand="colorPicker();"/>
								</xul:menupopup>
							</xul:toolbarbutton>
							<xul:toolbarbutton id="colorSwitch" image="chrome://rtse/skin/images/editor/color.png" oncommand="switchColor();" tooltipText="Color" hidden="true"/>
							<xul:toolbarbutton id="smiley" image="chrome://rtse/skin/images/editor/happy.png" tooltipText="Smilies" hidden="true"/>
							<xul:toolbarbutton id="friendsOnly" hidden="true" type="checkbox" image="chrome://rtse/content/images/unlocked.png"/>
							<xul:toolbarbutton id="newConv" hidden="true" autoCheck="false" image="chrome://rtse/content/images/newConv.png"/>
						</xul:toolbar>
					</xul:toolbox>
					<html:textarea id="body" rows="12" cols="1" tabindex="2"><children/></html:textarea>
					<xul:toolbox id="bottomToolbar" orient="horizontal">
						<xul:toolbar>
							<xul:box id="defaultSmiliesToolbar" hidden="true">
								<xul:toolbarbutton image="chrome://rtse/content/images/smiley0.gif" autoCheck="false" oncommand="insertTag('smiley0');"/>
								<xul:toolbarbutton image="chrome://rtse/content/images/smiley1.gif" autoCheck="false" oncommand="insertTag('smiley1');"/>
								<xul:toolbarbutton image="chrome://rtse/content/images/smiley2.gif" autoCheck="false" oncommand="insertTag('smiley2');"/>
								<xul:toolbarbutton image="chrome://rtse/content/images/smiley3.gif" autoCheck="false" oncommand="insertTag('smiley3');"/>
								<xul:toolbarbutton image="chrome://rtse/content/images/smiley4.gif" autoCheck="false" oncommand="insertTag('smiley4');"/>
								<xul:toolbarbutton image="chrome://rtse/content/images/smiley5.gif" autoCheck="false" oncommand="insertTag('smiley5');"/>
								<xul:toolbarbutton image="chrome://rtse/content/images/smiley6.gif" autoCheck="false" oncommand="insertTag('smiley6');"/>
								<xul:toolbarbutton image="chrome://rtse/content/images/smiley7.gif" autoCheck="false" oncommand="insertTag('smiley7');"/>
								<xul:toolbarbutton image="chrome://rtse/content/images/smiley8.gif" autoCheck="false" oncommand="insertTag('smiley8');"/>
								<xul:toolbarbutton image="chrome://rtse/content/images/smiley9.gif" autoCheck="false" oncommand="insertTag('smiley9');"/>
								<xul:toolbarbutton image="chrome://rtse/content/images/smiley10.gif" autoCheck="false" oncommand="insertTag('smiley10');"/>
								<xul:toolbarbutton image="chrome://rtse/content/images/smiley11.gif" autoCheck="false" oncommand="insertTag('smiley11');"/>
								<xul:toolbarbutton image="chrome://rtse/content/images/smiley12.gif" autoCheck="false" oncommand="insertTag('smiley12');"/>
								<xul:toolbarspacer flex="1000"/>
							</xul:box>
							<xul:toolbaritem>
								<xul:checkbox id="convertSmilies" label="Convert Smilies" checked="true" tabindex="5" xbl:inherits="checked=convertSmilies"/>
							</xul:toolbaritem>
							<xul:toolbarspacer flex="1000"/>
							<xul:toolbarbutton class="image-button" image="chrome://rtse/skin/images/editor/rt-rvb_preview.png" oncommand="previewSubmit();" tabindex="3"/>
							<xul:toolbarbutton class="image-button" image="chrome://rtse/skin/images/editor/rt-rvb_submit.png" oncommand="submit();" tabindex="4"/>
							<xul:toolbarspacer flex="1"/>
						</xul:toolbar>
					</xul:toolbox>
				</xul:vbox>
				<xul:vbox pack="center"><!-- Index 1 - Link Code -->
					<xul:grid >
						<xul:columns>
							<xul:column width="75"/>
							<xul:column flex="1"/>
						</xul:columns>
						<xul:rows>
							<xul:row>
								<xul:label value="Link URL:"/>
								<html:input type="text" id="urlBox"/>
							</xul:row>
							<xul:row height="5"/>
							<xul:row>
								<xul:label value="Link Label:"/>
								<html:input type="text" id="urlTextBox"/>
							</xul:row>
						</xul:rows>
					</xul:grid>
					<xul:hbox pack="end">
						<xul:toolbar>
							<xul:toolbarbutton class="image-button" image="chrome://rtse/content/images/rt-rvb_create.png" oncommand="insertLink();"/>
							<xul:toolbarbutton class="image-button" image="chrome://rtse/content/images/rt-rvb_cancel.png" oncommand="cancel();"/>
						</xul:toolbar>
					</xul:hbox>
				</xul:vbox>
				<xul:vbox flex="1"><!-- Index 2 - Color Picker -->
				</xul:vbox>
			</xul:deck>
			<!-- End of the content -->
		</content>
		<implementation name="chrome://rtse/content/bindings.xml#editor">
			<!-- Fields and Properties -->
			<field name="title"/>
			<property name="title"
			          onget="return this.getAttribute('title');"
					  onset="return this.setAttribute('title',val);"/>
			<property name="body">
				<setter>
					<![CDATA[
						return this.getElementById('body').value = val;
					]]>
				</setter>
				<getter>
					<![CDATA[
						return this.getElementById('body').value;
					]]>
				</getter>
			</property>
			<field name="sponsor"/>
			<property name="sponsor">
				<setter>
					<![CDATA[
						if (val) {
							this.getElementById('defaultSmiliesToolbar').hidden = false;
							this.getElementById('color').hidden = false;
							return this.setAttribute('sponsor','true');
						} else {
							this.getElementById('defaultSmiliesToolbar').hidden = true;
							this.getElementById('color').hidden = true;
							return this.setAttribute('sponsor','false');
						}
					]]>
				</setter>
				<getter>
					<![CDATA[
						return this.getAttribute('showTitle');
					]]>
				</getter>
			</property>
			<field name="journal"/>
			<property name="journal">
				<setter>
					<![CDATA[
						if (val) {
							this.getElementById('friendsOnly').hidden = false;
							return this.setAttribute('journal','true');
						} else {
							this.getElementById('friendsOnly').hidden = true;
							return this.setAttribute('journal','false');
						}
					]]>
				</setter>
				<getter>
					<![CDATA[
						if (this.getAttribute('journal')) return this.getAttribute('journal');
						else return 'false';
					]]>
				</getter>
			</property>
			<field name="convertSmilies"/>
			<property name="convertSmilies">
				<setter>
					<![CDATA[
						if (val) {
							this.getElementById('defaultSmiliesToolbar').hidden = false;
							this.getElementById('color').hidden = false;
							return this.setAttribute('sponsor','true');
						} else {
							this.getElementById('defaultSmiliesToolbar').hidden = true;
							this.getElementById('color').hidden = true;
							return this.setAttribute('sponsor','false');
						}
					]]>
				</setter>
				<getter>
					<![CDATA[
						return this.getAttribute('showTitle');
					]]>
				</getter>
			</property>
			<field name="showTitle"/>
			<property name="showTitle">
				<setter>
					<![CDATA[
						if (val) {
							this.getElementById('title').setAttribute('type','text');
							return this.setAttribute('showTitle','true');
						} else {
							this.getElementById('title').setAttribute('type','hidden');
							return this.setAttribute('showTitle','false');
						}
					]]>
				</setter>
				<getter>
					<![CDATA[
						return this.getAttribute('showTitle');
					]]>
				</getter>
			</property>
			<field name="parentFormName"/>
			<property name="parentFormName">
				<setter>
					<![CDATA[
						return this.setAttribute('parentFormName');
					]]>
				</setter>
				<getter>
					<![CDATA[
						return this.getAttribute('parentFormName');
					]]>
				</getter>
			</property>
			<field name="titleFormField"/>
			<property name="titleFormField">
				<setter>
					<![CDATA[
						return this.setAttribute('titleFormField');
					]]>
				</setter>
				<getter>
					<![CDATA[
						return this.getAttribute('titleFormField');
					]]>
				</getter>
			</property>
			<field name="bodyFormField"/>
			<property name="bodyFormField">
				<setter>
					<![CDATA[
						return this.setAttribute('bodyFormField');
					]]>
				</setter>
				<getter>
					<![CDATA[
						return this.getAttribute('bodyFormField');
					]]>
				</getter>
			</property>
			<!-- Methods -->
      <!--
       /**
        * Method: addSmilies
        *  Takes a menupopup and places it in the smilies menu
        *
        * @param aMenu an xul:menupopup containing the smilies
        */
      -->
      <method name="addSmilies">
        <parameter name="aMenu"/>
        <body><![CDATA[
          var ref = this.getElementById('smiley');
          ref.setAttribute('type', 'menu');
          ref.hidden = false;
          ref.appendChild(aMenu);
        ]]></body>
      </method>
      <!--
			 /**
			  * Method: insertTag
			  *  Method inserts the tag into the body.  This takes
			  *  care of whether or not text is selected.
			  *
			  * @tag
			  *  The tag that will be inserted in the body.
			  */
			-->
			<method name="insertTag">
				<parameter name="tagText"/>
				<body>
					<![CDATA[
						var text = this.getElementById('body');
						var elm = this.getElementById(tagText);

						if (text.selectionStart==text.selectionEnd || !elm) {
							// No text selected
							var bool;
              if (elm || tagText.match(/smiley[0-9]+/)) {
                bool = elm ? this.getElementById(tagText).checked : false;
							  if (bool)
							    tag = '[/'+tagText+']';
							  else
                  tag = '['+tagText+']';
              } else {
                tag = tagText;
              }
							var pos = text.selectionStart+tag.length;
							if (elm) this.getElementById(tagText).checked = !bool;
							text.value = text.value.substring(0,text.selectionStart)+tag+text.value.substring(text.selectionStart,text.textLength);
							text.setSelectionRange(pos,pos);
							text.focus();
						} else {
							// Text is selected 
							var tag = '['+tagText+']';
							var length = tag.length;
							var data = text.value.substring(0,text.selectionStart)+tag;
							tag = '[/'+tagText+']';
							length += tag.length;
							var start = text.selectionStart;
							var end = text.selectionEnd;
							data += text.value.substring(text.selectionStart,text.selectionEnd)+tag+text.value.substring(text.selectionEnd,text.textLength);
							text.value = data;
							text.setSelectionRange(start,end+length);
							text.focus();
						}
					]]>
				</body>
			</method>
			<!--
			 /**
			  * Method: addColor
			  *  Method inserts the color tag into the body.  This
			  *  tages care of whether or not text is selected.
			  *
			  * @hex
			  *  The hex value of the color to be specified.
			  */
			-->
			<method name="addColor">
				<parameter name="hex"/>
				<body>
					<![CDATA[
						var text=this.getElementById('body');

						if( text.selectionStart==text.selectionEnd ) {
							// No text selected
							var button = this.getElementById('color');
							var tag = '[color=#'+hex+']';
							var other = this.getElementById('colorSwitch');
							button.hidden = true;
							other.hidden = false;
							other.checked = true;
							var pos=text.selectionStart+tag.length;
							text.value=text.value.substring(0,text.selectionStart)+tag+text.value.substring(text.selectionStart,text.textLength);
							text.setSelectionRange(pos,pos);
						} else {
							// Text is selected
							var tag='[color=#'+hex+']';
							var length=tag.length;
							var data=text.value.substring(0,text.selectionStart)+tag;
							tag='[/color]';
							length+=tag.length;
							var start=text.selectionStart;
							var end=text.selectionEnd;
							data+=text.value.substring(text.selectionStart,text.selectionEnd)+tag+text.value.substring(text.selectionEnd,text.textLength);
							text.value=data;
							text.setSelectionRange(start,end+length);
						}

						text.focus();
					]]>
				</body>
			</method>
			<!--
			 /**
			  * Method: switchColor
			  *  Switches the two buttons (non menu to menu)
			  */
			-->
			<method name="switchColor">
				<body>
					<![CDATA[
						var other = this.getElementById('colorSwitch');
						if (!other.checked) return;
						other.checked = false;
						this.getElementById('color').setAttribute('open','false');
						other.hidden = true;
						this.getElementById('color').hidden = false;
						this.insertTag('/color');
					]]>
				</body>
			</method>
			<!--
			 /**
			  * Method: link
			  *  Switches the deck to the link area
			  */
			-->
			<method name="link">
				<body>
					<![CDATA[
						var text = this.getElementById('body');
						var value = '';
						if (text.selectionStart!=text.selectionEnd) {
							// text is selected
							value = text.value.substring(text.selectionStart,text.selectionEnd);
						}
						this.getElementById('urlTextBox').value = value;
						this.getElementById('urlBox').value = 'http://';
						this.getElementById('deck').selectedIndex = "1";
					]]>
				</body>
			</method>
			<!--
			 /**
			  * Method: insertLink
			  *  Switches the deck to the link area
			  */
			-->
			<method name="insertLink">
				<body>
					<![CDATA[
						var text = this.getElementById('body');
						var url = this.getElementById('urlBox').value;
						var txt = this.getElementById('urlTextBox').value;
						var tag = '[link='+url+']'+txt+'[/link]';

						var start = text.selectionStart;
						var end = text.selectionStart+tag.length;
						text.value = text.value.substring(0,text.selectionStart)+tag
						             +text.value.substring(text.selectionEnd,text.textLength);
						text.setSelectionRange(start,end);
						this.getElementById('deck').selectedIndex = "0";
						text.focus();
					]]>
				</body>
			</method>
			<!--
			 /**
			  * Method: colorPicker
			  *  Opens the colorPicker dialog
			  */
			-->
			<method name="colorPicker">
				<body>
					<![CDATA[
						this.getElementById('deck').selectedIndex = "2";
					]]>
				</body>
			</method>
			<!--
			 /**
			  * Method: cancel
			  *  Used for both the colorpicker and the link code.  Called
			  *  when cancel is pressed.
			  */
			-->
			<method name="cancel">
				<body>
					<![CDATA[
						this.getElementById('deck').selectedIndex = "0";
						this.getElementById('body').focus();
					]]>
				</body>
			</method>
			<!--
			 /**
			  * Method: focus
			  *  Focuses the body element.
			  */
			-->
			<method name="focus">
				<body>
					<![CDATA[
						this.getElementById('body').focus()
					]]>
				</body>
			</method>
			<!--
			 /**
			  * Method: submit
			  *  Called when submitting the form.
			  */
			-->
			<method name="submit">
				<body>
					<![CDATA[
						// first things first, lets validate
						if (!this.validate()) return;

						// Dumping form data into the right place
						var field;
						var doc = this.ownerDocument;
						var form = doc.forms.namedItem(this.getAttribute('parentFormName'));
						var body = form.elements.namedItem(this.getAttribute('bodyFormField'));
						if (body) {
							body.value = this.getElementById('body').value;
						} else {
							field = doc.createElement('input');
							field.setAttribute('type','hidden');
							field.setAttribute('value',this.getElementById('body').value);
							field.setAttribute('name',this.getAttribute('bodyFormField'));
							form.appendChild(field);
						}
						var title = form.elements.namedItem(this.getAttribute('titleFormField'));
						if (this.getAttribute('showTitle')=='true' && title) {
							title.value = this.getElementById('title').value;
						} else if (this.getAttribute('showTitle')=='true') {
							field = doc.createElement('input');
							field.setAttribute('type','hidden');
							field.setAttribute('value',this.getElementById('title').value);
							field.setAttribute('name',this.getAttribute('titleFormField'));
							form.appendChild(field);
						}
						// Only if a journal
						if (this.getAttribute('journal')=='true') {
							field = doc.createElement('input');
							field.setAttribute('type','hidden');
							field.setAttribute('value',(this.getElementById('friendsOnly').checked)?'1':'0');
							field.setAttribute('name','friendsOnly');
							form.appendChild(field);
						}

						// and finally submitting (cannot use .submit() because event listeners are not dispatched)
						var event = doc.createEvent('HTMLEvents');
						event.initEvent('submit',true,true);
						form.dispatchEvent(event);
					]]>
				</body>
			</method>
			<!--
			 /**
			  * Method: previewSubmit
			  *  Called when previewing the form.
			  */
			-->
			<method name="previewSubmit">
				<body>
					<![CDATA[
						// first things first, lets validate
						if (!this.validate()) return;
						
						// Dumping form data into the right place
						var field;
						var doc = this.ownerDocument;
						var form = doc.forms.namedItem(this.getAttribute('parentFormName'));
						if (this.getAttribute('preview')) {
							form.setAttribute('action',this.getAttribute('preview'));
							this.submit();
						} else {
							alert('Sorry.  No preview url was provided, so a preview cannot be generated');
						}
					]]>
				</body>
			</method>
			<!--
			 /**
			  * Method: validate
			  *  Returns true if everything is OK, false and pops up an alert otherwise.
			  */
			-->
			<method name="validate">
				<body>
					<![CDATA[
						var body = this.getElementById('body');
						var title = this.getElementById('title');

						if (body.value=='') {
							alert('You must enter a body');
							body.focus();
							return false;
						}

						if (this.getAttribute('title')=='true' && (title.value=='' || title.value=='Please Specify a Title')) {
							alert('You must enter a title');
							title.focus();
							return false;
						}

						// should be all good
						return true;
					]]>
				</body>
			</method>
			<!--
			 /**
			  * Method: getElementById
			  *  Hack to let me use this DOM function.
			  *
			  * @id
			  *  The id of the element desired.
			  */
			-->
			<method name="getElementById">
				<parameter name="id"/>
				<body>
					<![CDATA[
						return document.getAnonymousElementByAttribute(this,'id',id);
					]]>
				</body>
			</method>
			<!-- Constructor and Destructor -->
			<constructor>
				<![CDATA[
					if (this.getAttribute('sponsor')=='true') {
						this.getElementById('color').hidden = false;
						this.getElementById('defaultSmiliesToolbar').hidden = false;
					}

					// If this is a journal, do stuff
					if (this.getAttribute('journal')=='true') {
						this.getElementById('friendsOnly').hidden = false;
						var toggle = function() {
							this.image = (this.checked)?'chrome://rtse/content/images/locked.png':'chrome://rtse/content/images/unlocked.png';
						};
						this.getElementById('friendsOnly').addEventListener('command',toggle,false);
					}

					// If this is a message, do stuff
					if (this.getAttribute('message')=='true') {
						if (this.getAttribute('lockTitle')=='true') { // this is message replies
							this.getElementById('title').disabled = true;
							var conv = this.getElementById('newConv');
							conv.hidden = false;
							var newConv = function() {
								this.hidden = true;
								this.ownerDocument.forms.namedItem('post').elements.namedItem('pid').value = '0';
								var ref = this.parentNode.parentNode.previousSibling;
								ref.disabled = false;
								ref.value = '';
								ref.focus();
							};
							conv.addEventListener('command',newConv,false);
						}
					}

					var style = this.getAttribute('style');
					var deck = this.getElementById('deck');
					var width = style.replace(/^.*width: ([0-9]+)px ! important;.*$/i,'$1')-8;
					deck.style.height = style.replace(/^.*height: ([0-9]+px) ! important;.*$/i,'$1');
					deck.style.width = width;
					
					// Title code (only runs if there is a title)
					if (this.getAttribute('showTitle')=='true') {
						const defaultTitle = 'Please Specify a Title';
						var title = this.getElementById('title');
						title.setAttribute('type','text');
						
						// Setting the title to the right text
						if (this.getAttribute('title')) {
							title.value = this.getAttribute('title');
						} else {
							title.value = defaultTitle;
						}

						// Fancy title code
						var focus = function() {
							if (this.value==defaultTitle) this.value = '';
							this.style.borderColor = '';
						};
						var blur = function() {
							if (this.value=='') {
								this.value = defaultTitle;
								this.style.borderColor = '#FF0000';
							}
						};
						title.addEventListener('focus',focus,false);
						title.addEventListener('blur',blur,false);
					}

					// Setting the body to the right text
					var body = this.getElementById('body');
					body.value = this.getAttribute('body');
					var blur = function() {
						if (this.value=='')
							this.style.borderColor = '#FF0000';
					};
					var focus = function() {
						this.style.borderColor = '';
					};
					body.addEventListener('focus',focus,false);
					body.addEventListener('blur',blur,false);

					// The rest is a big hack to make this all work
					var func = function() {
						// Hack to make the oncommand stuff work
						var cmd = new String(this.getAttribute('oncommand'))+''; // I don't know why, but the quotes need to be there
						eval(cmd);
					};
					var addListener = function(aList) {
						// Adds the function to each element
						for (var i = (aList.length-1); i>=0; i--)
							aList[i].addEventListener('command',func,false);
					};
					var elms = this.getElementById('deck').getElementsByTagName('toolbarbutton');
					addListener(elms);
					elms = this.getElementById('deck').getElementsByTagName('menuitem');
					addListener(elms);
				]]>
			</constructor>
			<destructor>
				<![CDATA[
					this.textContent = this.getAttribute('body');
					this.setAttribute('title',this.getElementById('title').value);
				]]>
			</destructor>
		</implementation>
		<handlers>
			<handler event="keypress" key="b" modifiers="alt" phase="capturing">
				<![CDATA[
					event.stopPropagation();
					event.preventDefault();
					insertTag('b');
				]]>
			</handler>
			<handler event="keypress" key="i" modifiers="alt" phase="capturing">
				<![CDATA[
					event.stopPropagation();
					event.preventDefault();
					insertTag('i');
				]]>
			</handler>
			<handler event="keypress" key="u" modifiers="alt" phase="capturing">
				<![CDATA[
					event.stopPropagation();
					event.preventDefault();
					insertTag('u');
				]]>
			</handler>
			<handler event="keypress" key="s" modifiers="alt" phase="capturing">
				<![CDATA[
					event.stopPropagation();
					event.preventDefault();
					insertTag('s');
				]]>
			</handler>
			<handler event="keypress" key="l" modifiers="alt" phase="capturing">
				<![CDATA[
					event.stopPropagation();
					event.preventDefault();
					link();
				]]>
			</handler>
			<handler event="keypress" key="p" modifiers="alt" phase="capturing">
				<![CDATA[
					event.stopPropagation();
					event.preventDefault();
					insertTag('img');
				]]>
			</handler>
		</handlers>
	</binding>
</bindings>
